/**
 * Interface created for java.lang.String
 */
public final class String extends Object implements Serializable, Comparable, CharSequence, Constable, ConstantDesc {
        // Field information
         static final byte UTF16;
         static final byte LATIN1;
         public static final Comparator<String> CASE_INSENSITIVE_ORDER;
         private static final char REPL;
         private static final ObjectStreamField[] serialPersistentFields;
         static final boolean COMPACT_STRINGS;
         private static final long serialVersionUID;
         private boolean hashIsZero;
         private int hash;
         private final byte coder;
         private final byte[] value;

        // Constructor information
         public String(int[], int, int);
         public String(byte[], int, int, int);
         public String(byte[], int);
         public String(byte[], int, int, String);
         public String();
         public String(String);
         public String(char[]);
         public String(char[], int, int);
         public String(byte[]);
         public String(byte[], int, int);
         public String(byte[], Charset);
         public String(byte[], String);
         public String(byte[], int, int, Charset);
         public String(StringBuilder);
         public String(StringBuffer);

        // Declared method information
         private static String lambda$indent$0(String, String);
         private static String lambda$indent$1(String);
         private static String lambda$indent$2(int, String);
         private static String lambda$stripIndent$3(int, String);
         public Optional<String> describeConstable();
         static String valueOfCodePoint(int);
         static void checkOffset(int, int);
         public native String intern();
         public static String copyValueOf(char[], int, int);
         public static String copyValueOf(char[]);
         public transient String formatted(Object[]);
         public R transform(Function<? super String, ? extends R>);
         public IntStream chars();
         public String translateEscapes();
         public String stripIndent();
         public String indent(int);
         public boolean contains(CharSequence);
         public String concat(String);
         public CharSequence subSequence(int, int);
         public boolean endsWith(String);
         public int compareToIgnoreCase(String);
         public boolean equalsIgnoreCase(String);
         static int decodeASCII(byte[], int, char[], int, int);
         static byte[] getBytesNoRepl(String, Charset);
         static byte[] getBytesUTF8NoRepl(String);
         static String newStringNoRepl(byte[], Charset);
         public IntStream codePoints();
         public String resolveConstantDesc(MethodHandles$Lookup);
         public volatile Object resolveConstantDesc(MethodHandles$Lookup);
         public static transient String format(Locale, String, Object[]);
         public static transient String format(String, Object[]);
         public char[] toCharArray();
         public boolean isBlank();
         private static int outdent(List<String>);
         private int lastIndexOfNonWhitespace();
         public String repeat(int);
         public Stream<String> lines();
         private int indexOfNonWhitespace();
         public String stripTrailing();
         public String stripLeading();
         public String strip();
         public String trim();
         public String toUpperCase(Locale);
         public String toUpperCase();
         public String toLowerCase(Locale);
         public String toLowerCase();
         public static String join(CharSequence, Iterable<? extends CharSequence>);
         static String join(String, String, String, String[], int);
         public static transient String join(CharSequence, CharSequence[]);
         public String[] split(String);
         public String[] split(String, int);
         public String replaceAll(String, String);
         public String replaceFirst(String, String);
         public boolean matches(String);
         public String replace(char, char);
         public String replace(CharSequence, CharSequence);
         public boolean isEmpty();
         public String substring(int);
         public String substring(int, int);
         public int lastIndexOf(String);
         static int lastIndexOf(byte[], byte, int, String, int);
         public int lastIndexOf(String, int);
         public int lastIndexOf(int);
         public int lastIndexOf(int, int);
         public boolean startsWith(String, int);
         public boolean startsWith(String);
         public boolean regionMatches(int, String, int, int);
         public boolean regionMatches(boolean, int, String, int, int);
         private boolean nonSyncContentEquals(AbstractStringBuilder);
         public boolean contentEquals(StringBuffer);
         public boolean contentEquals(CharSequence);
         public void getBytes(int, int, byte[], int);
         public byte[] getBytes(String);
         public byte[] getBytes(Charset);
         void getBytes(byte[], int, byte);
         public byte[] getBytes();
         void getBytes(byte[], int, int, byte, int);
         static void checkBoundsBeginEnd(int, int, int);
         public int offsetByCodePoints(int, int);
         public int codePointCount(int, int);
         public int codePointBefore(int);
         public int codePointAt(int);
         public char charAt(int);
         boolean isLatin1();
         private static byte[] encodeUTF8_UTF16(byte[], boolean);
         private static boolean isMalformed4_3(int);
         private static boolean isMalformed4_2(int, int);
         private static int malformed4(byte[], int);
         private static boolean isMalformed4(int, int, int);
         private static int decode4(int, int, int, int);
         private static boolean isMalformed3_2(int, int);
         private static char decode3(int, int, int);
         private static int malformed3(byte[], int);
         private static boolean isMalformed3(int, int, int);
         private static boolean isNotContinuation(int);
         private static void throwUnmappable(int);
         private static void throwUnmappable(byte[]);
         private static boolean isASCII(byte[]);
         private static byte[] getBytesNoRepl1(String, Charset);
         private static byte[] encode(Charset, byte, byte[]);
         private static byte[] safeTrim(byte[], int, boolean);
         private static byte[] encodeWithEncoder(Charset, byte, byte[], boolean);
         private static byte[] encodeASCII(byte, byte[]);
         private static byte[] encode8859_1(byte, byte[]);
         private static byte[] encode8859_1(byte, byte[], boolean);
         private static byte[] encodeUTF8(byte, byte[], boolean);
         private static void throwMalformed(byte[]);
         private static void throwMalformed(int, int);
         static String newStringUTF8NoRepl(byte[], int, int);
         private static String newStringNoRepl1(byte[], Charset);
         private static int decodeWithDecoder(CharsetDecoder, char[], byte[], int, int);
         private static int scale(int, float);
         private static int decodeUTF8_UTF16(byte[], int, int, byte[], int, boolean);
         private static char decode2(int, int);
         private static Charset lookupCharset(String);
         static void checkBoundsOffCount(int, int, int);
         private static Void rangeCheck(char[], int, int);
         byte coder();
         public static String valueOf(float);
         public static String valueOf(int);
         public static String valueOf(long);
         public static String valueOf(double);
         public static String valueOf(boolean);
         public static String valueOf(Object);
         public static String valueOf(char[]);
         public static String valueOf(char[], int, int);
         public static String valueOf(char);
         public int indexOf(int, int);
         public int indexOf(int);
         public int indexOf(String, int);
         static int indexOf(byte[], byte, int, String, int);
         public int indexOf(String);
         public volatile int compareTo(Object);
         public int compareTo(String);
         public void getChars(int, int, char[], int);
         public int hashCode();
         static void checkIndex(int, int);
         public String toString();
         public int length();
         public boolean equals(Object);
         byte[] value();
